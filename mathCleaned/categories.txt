DEFNN	  A category MATH consists of the following data: <CASES> CASE: A set of objects MATH. CASE: For each pair MATH a set of morphisms MATH. CASE: For each triple MATH a composition map MATH, denoted MATH. </CASES> These data are to satisfy the following rules: <CASES> CASE: For every element MATH there exists a morphism MATH such that MATH and MATH whenever these compositions make sense. CASE: Composition is associative, i.e., MATH whenever these compositions make sense. </CASES>  
DEFNN	  A morphism MATH is an isomorphism of the category MATH if there exists a morphism MATH such that MATH and MATH.  
DEFNN	  A groupoid is a category where every morphism is an isomorphism.  
DEFNN	  A functor MATH between two categories MATH is given by the following data: <CASES> CASE: A map MATH. CASE: For every MATH a map MATH, denoted MATH. </CASES> These data should be compatible with composition and identity morphisms in the following manner: MATH for a composable pair MATH of morphisms of MATH and MATH.  
DEFNN	  Let MATH be a functor. <CASES> CASE: We say MATH is faithful if for any objects MATH the map MATH is injective. CASE: If these maps are all bijective then MATH is called fully faithful. CASE: The functor MATH is called essentially surjective if for any object MATH there exists an object MATH such that MATH is isomorphic to MATH in MATH. </CASES>  
DEFNN	  A subcategory of a category MATH is a category MATH whose objects and arrows form subsets of the objects and arrows of MATH and such that source, target and composition in MATH agree with those of MATH and such that the identity morphism of an object of MATH matches the one in MATH. We say MATH is a full subcategory of MATH if MATH for all MATH. We say MATH is a strictly full subcategory of MATH if it is a full subcategory and given MATH any object of MATH which is isomorphic to MATH is also in MATH.  
DEFNN	  Let MATH be functors. A natural transformation, or a morphism of functors MATH, is a collection MATH such that <CASES> CASE: MATH is a morphism in the category MATH, and CASE: for every morphism MATH of MATH the following diagram is commutative MATH </CASES>  
DEFNN	  An equivalence of categories MATH is a functor such that there exists a functor MATH such that the compositions MATH and MATH are isomorphic to the identity functors MATH, respectively MATH. In this case we say that MATH is a quasi-inverse to MATH.  
LEMMA	  Let MATH be a fully faithful functor. Suppose for every MATH we are given an object MATH of MATH and an isomorphism MATH. Then there is a unique functor MATH such that MATH extends the rule on objects, and the isomorphisms MATH define an isomorphism of functors MATH. Moreover, MATH and MATH are quasi-inverse equivalences of categories.  
LEMMA	  A functor is an equivalence of categories if and only if it is both fully faithful and essentially surjective.  
DEFNN	  Let MATH, MATH be categories. We define the product category MATH to be the category with objects MATH and MATH Composition is defined componentwise.  
DEFNN	  Given a category MATH the opposite category MATH is the category with the same objects as MATH but all morphisms reversed.  
DEFNN	  Let MATH, MATH be categories. A contravariant functor MATH from MATH to MATH is a functor MATH.  
DEFNN	  Let MATH be a category. <CASES> CASE: A presheaf of sets on MATH or simply a presheaf is a contravariant functor MATH from MATH to MATH. CASE: The category of presheaves is denoted MATH. </CASES>  
LEMMA	[Yoneda lemma]  REF Let MATH. Given any morphism of functors MATH there is a unique morphism MATH such that MATH. In other words the functor MATH is fully faithful. More generally, given any contravariant functor MATH and any object MATH of MATH we have a natural bijection MATH  
DEFNN	  A contravariant functor MATH is said to be representable if it is isomorphic to the functor of points MATH for some object MATH of MATH.  
DEFNN	  Let MATH. A product of MATH and MATH is an object MATH together with morphisms MATH and MATH such that the following universal property holds: for any MATH and morphisms MATH and MATH there is a unique MATH making the diagram MATH commute.  
DEFNN	  We say the category MATH has products of pairs of objects if a product MATH exists for any MATH.  
DEFNN	  Let MATH. A coproduct, or amalgamated sum of MATH and MATH is an object MATH together with morphisms MATH and MATH such that the following universal property holds: for any MATH and morphisms MATH and MATH there is a unique MATH making the diagram MATH commute.  
DEFNN	  We say the category MATH has coproducts of pairs of objects if a coproduct MATH exists for any MATH.  
DEFNN	  Let MATH, MATH and MATH. A fibre product of MATH and MATH is an object MATH together with morphisms MATH and MATH making the diagram MATH commute, and such that the following universal property holds: for any MATH and morphisms MATH and MATH with MATH there is a unique MATH making the diagram MATH commute.  
DEFNN	  We say a commutative diagram MATH in a category is cartesian if MATH and the morphisms MATH and MATH form a fibre product of the morphisms MATH and MATH.  
DEFNN	  We say the category MATH has fibre products if the fibre product exists for any MATH and MATH.  
DEFNN	  A morphism MATH of a category MATH is said to be representable if for every morphism MATH in MATH the fibre product MATH exists.  
LEMMA	  Let MATH be a category. Let MATH, and MATH be representable. Then MATH is representable.  
LEMMA	  Let MATH be a category. Let MATH be representable. Let MATH be a morphism of MATH. Then the morphism MATH is representable also.  
LEMMA	  Let MATH be a category. Let MATH be functors. Let MATH and MATH be transformations of functors. Then the fibre product MATH in the category MATH exists and is given by the formula MATH for any object MATH of MATH.  
DEFNN	  Let MATH be a category. Let MATH be functors. We say a morphism MATH is representable, or that MATH is relatively representable over MATH, if for every MATH and any MATH the functor MATH is representable.  
LEMMA	  Let MATH be a category. Let MATH be a morphism of contravariant functors from MATH to MATH. If MATH is representable, and MATH is a representable functor, then MATH is representable.  
LEMMA	  Let MATH be a category. Let MATH be a functor. Assume MATH has products of pairs of objects and fibre products. The following are equivalent: <CASES> CASE: the diagonal MATH is representable, CASE: for every MATH in MATH, and any MATH the map MATH is representable, CASE: for every pair MATH in MATH and any MATH, MATH the fibre product MATH is representable. </CASES>  
DEFNN	  Let MATH, MATH and MATH. A pushout of MATH and MATH is an object MATH together with morphisms MATH and MATH making the diagram MATH commute, and such that the following universal property holds: For any MATH and morphisms MATH and MATH with MATH there is a unique MATH making the diagram MATH commute.  
DEFNN	  We say a commutative diagram MATH in a category is cocartesian if MATH and the morphisms MATH and MATH form a pushout of the morphisms MATH and MATH.  
DEFNN	  Suppose that MATH, MATH are objects of a category MATH and that MATH are morphisms. We say a morphism MATH is an equalizer for the pair MATH if MATH and if MATH satisfies the following universal property: For every morphism MATH in MATH such that MATH there exists a unique morphism MATH such that MATH.  
DEFNN	  Suppose that MATH, MATH are objects of a category MATH and that MATH are morphisms. We say a morphism MATH is a coequalizer for the pair MATH if MATH and if MATH satisfies the following universal property: For every morphism MATH in MATH such that MATH there exists a unique morphism MATH such that MATH.  
DEFNN	  Let MATH be a category. <CASES> CASE: An object MATH of the category MATH is called an initial object if for every object MATH of MATH there is exactly one morphism MATH. CASE: An object MATH of the category MATH is called a final object if for every object MATH of MATH there is exactly one morphism MATH. </CASES>  
DEFNN	  Let MATH be a category and let MATH be a morphism of MATH. <CASES> CASE: We say that MATH is a monomorphism if for every object MATH and every pair of morphisms MATH such that MATH we have MATH. CASE: We say that MATH is an epimorphism if for every object MATH and every pair of morphisms MATH such that MATH we have MATH. </CASES>  
LEMMA	  Let MATH be a category, and let MATH be a morphism of MATH. Then <CASES> CASE: MATH is a monomorphism if and only if MATH is the fibre product MATH, and CASE: MATH is an epimorphism if and only if MATH is the pushout MATH. </CASES>  
DEFNN	  A limit of the MATH-diagram MATH in the category MATH is given by an object MATH in MATH together with morphisms MATH such that <CASES> CASE: for MATH a morphism in MATH we have MATH, and CASE: for any object MATH in MATH and any family of morphisms MATH (indexed by MATH) such that for all MATH in MATH we have MATH there exists a unique morphism MATH such that MATH for every object MATH of MATH. </CASES>  
DEFNN	  A colimit of the MATH-diagram MATH in the category MATH is given by an object MATH in MATH together with morphisms MATH such that <CASES> CASE: for MATH a morphism in MATH we have MATH, and CASE: for any object MATH in MATH and any family of morphisms MATH (indexed by MATH) such that for all MATH in MATH we have MATH there exists a unique morphism MATH such that MATH for every object MATH of MATH. </CASES>  
DEFNN	  Suppose that MATH is a set, and suppose given for every MATH an object MATH of the category MATH. A product MATH is by definition MATH (if it exists) where MATH is the category having only identities as morphisms and having the elements of MATH as objects.  
DEFNN	  Suppose that MATH is a set, and suppose given for every MATH an object MATH of the category MATH. A coproduct MATH is by definition MATH (if it exists) where MATH is the category having only identities as morphisms and having the elements of MATH as objects.  
LEMMA	  Suppose that MATH, and MATH are diagrams whose colimits exist. Suppose MATH is a functor, and suppose MATH is a transformation of functors. Then there is a unique morphism MATH such that all the diagrams MATH commute.  
LEMMA	  Suppose that MATH, and MATH are diagrams whose limits exist. Suppose MATH is a functor, and suppose MATH is a transformation of functors. Then there is a unique morphism MATH such that all the diagrams MATH commute.  
LEMMA	  Let MATH, MATH be index categories. Let MATH be a functor. Assume that MATH  exists for all MATH. Then the resulting functor MATH has a colimit if and only if MATH does, and then the colimits coincide. In particular, we have MATH provided all the indicated colimits exist. Similar for limits.  
LEMMA	  Let MATH be a diagram. Write MATH and MATH. Denote MATH the source and target maps. Suppose that MATH and MATH exist. Suppose that the equalizer of MATH exists, where the morphisms are determined by their components as follows: MATH and MATH. Then this equalizer is the limit of the diagram.  
LEMMA	  [ If all coproducts and coequalizers exist, all colimits exist. ] Let MATH be a diagram. Write MATH and MATH. Denote MATH the source and target maps. Suppose that MATH and MATH exist. Suppose that the coequalizer of MATH exists, where the morphisms are determined by their components as follows: The component MATH maps via MATH to the component MATH via the morphism MATH. The component MATH maps via MATH to the component MATH by the identity morphism. Then this coequalizer is the colimit of the diagram.  
DEFNN	  We say that a category MATH is connected if the equivalence relation generated by MATH has exactly one equivalence class.  
LEMMA	  Let MATH be a category. Let MATH be an object of MATH. Let MATH be a diagram in the category of objects over MATH. If the index category MATH is connected and the limit of MATH exists in MATH, then the limit of the composition MATH exists and is the same.  
LEMMA	  Let MATH be a category. Let MATH be an object of MATH. Let MATH be a diagram in the category of objects under MATH. If the index category MATH is connected and the colimit of MATH exists in MATH, then the colimit of the composition MATH exists and is the same.  
DEFNN	  Let MATH be a functor between categories. We say MATH is cofinal in MATH or that MATH is cofinal if <CASES> CASE: for all MATH there exist an MATH and a morphism MATH, and CASE: given MATH, MATH and morphisms MATH and MATH there exist a sequence of morphisms MATH in MATH and morphisms MATH in MATH such that the diagrams MATH commute for MATH. </CASES>  
LEMMA	  Let MATH be a functor of categories. Assume MATH is cofinal in MATH. Then for every diagram MATH we have a canonical isomorphism MATH if either side exists.  
DEFNN	  Let MATH be a functor between categories. We say MATH is initial in MATH or that MATH is initial if <CASES> CASE: for all MATH there exist an MATH and a morphism MATH, CASE: for any MATH, MATH and morphisms MATH, MATH in MATH there exist a sequence of morphisms MATH in MATH and morphisms MATH in MATH such that the diagrams MATH commute for MATH. </CASES>  
LEMMA	  Let MATH be a functor of categories. Assume MATH is initial in MATH. Then for every diagram MATH we have a canonical isomorphism MATH if either side exists.  
LEMMA	  Let MATH be a functor. Assume <CASES> CASE: the fibre categories (see Definition REF) of MATH over MATH are all connected, and CASE: for every morphism MATH in MATH there exists a morphism MATH in MATH such that MATH. </CASES> Then for every diagram MATH the colimit MATH exists if and only if MATH exists and if so these colimits agree.  
LEMMA	  Let MATH and MATH be a categories and denote MATH the projection. If MATH is connected, then for a diagram MATH the colimit MATH exists if and only if MATH exists and if so these colimits are equal.  
LEMMA	  Let MATH be a category with <CASES> CASE: MATH is finite, and CASE: there exist finitely many morphisms MATH such that every morphism of MATH is a composition MATH. </CASES> Then there exists a functor MATH such that <CASES> CASE: MATH is a finite category, and CASE: for any diagram MATH the (co)limit of MATH over MATH exists if and only if the (co)limit of MATH over MATH exists and in this case the (co)limits are canonically isomorphic. </CASES> Moreover, MATH is connected (resp.\ nonempty) if and only if MATH is so.  
LEMMA	  Let MATH be a category. The following are equivalent: <CASES> CASE: Connected finite limits exist in MATH. CASE: Equalizers and fibre products exist in MATH. </CASES>  
LEMMA	  Let MATH be a category. The following are equivalent: <CASES> CASE: Nonempty finite limits exist in MATH. CASE: Products of pairs and equalizers exist in MATH. CASE: Products of pairs and fibre products exist in MATH. </CASES>  
LEMMA	  Let MATH be a category. The following are equivalent: <CASES> CASE: Finite limits exist in MATH. CASE: Finite products and equalizers exist. CASE: The category has a final object and fibre products exist. </CASES>  
LEMMA	  Let MATH be a category. The following are equivalent: <CASES> CASE: Connected finite colimits exist in MATH. CASE: Coequalizers and pushouts exist in MATH. </CASES>  
LEMMA	  Let MATH be a category. The following are equivalent: <CASES> CASE: Nonempty finite colimits exist in MATH. CASE: Coproducts of pairs and coequalizers exist in MATH. CASE: Coproducts of pairs and pushouts exist in MATH. </CASES>  
LEMMA	  Let MATH be a category. The following are equivalent: <CASES> CASE: Finite colimits exist in MATH. CASE: Finite coproducts and coequalizers exist in MATH. CASE: The category has an initial object and pushouts exist. </CASES>  
DEFNN	  We say that a diagram MATH is directed, or filtered if the following conditions hold: <CASES> CASE: the category MATH has at least one object, CASE: for every pair of objects MATH of MATH there exist an object MATH and morphisms MATH, MATH, and CASE: for every pair of objects MATH of MATH and every pair of morphisms MATH of MATH there exists a morphism MATH of MATH such that MATH as morphisms in MATH. </CASES> We say that an index category MATH is directed, or filtered if MATH is filtered (in other words you erase the MATH in part (3) above).  
LEMMA	  Let MATH and MATH be index categories. Assume that MATH is filtered and MATH is finite. Let MATH, MATH be a diagram of diagrams of sets. In this case MATH In particular, colimits over MATH commute with finite products, fibre products, and equalizers of sets.  
LEMMA	  Let MATH be a category. Let MATH be a full subcategory. Assume that MATH is filtered. Assume also that for any object MATH of MATH, there exists a morphism MATH to some object MATH of MATH. Then MATH is filtered and cofinal in MATH.  
LEMMA	  Let MATH be an index category, i.e., a category. Assume that for every pair of objects MATH of MATH there exist an object MATH and morphisms MATH and MATH. Then <CASES> CASE: If MATH and MATH are diagrams of sets over MATH, then MATH is surjective, CASE: in general colimits of diagrams of sets over MATH do not commute with finite nonempty products. </CASES>  
LEMMA	  Let MATH be an index category, i.e., a category. Assume that for every pair of objects MATH of MATH there exist an object MATH and morphisms MATH and MATH. Let MATH be a diagram of abelian groups over MATH. Then the colimit of MATH in the category of sets surjects onto the colimit of MATH in the category of abelian groups.  
LEMMA	  Let MATH be an index category, i.e., a category. Assume that for every solid diagram MATH in MATH there exist an object MATH and dotted arrows making the diagram commute. Then MATH is either empty or a nonempty disjoint union of connected categories having the same property.  
LEMMA	  Let MATH be an index category, i.e., a category. Assume that for every solid diagram MATH in MATH there exist an object MATH and dotted arrows making the diagram commute. Then <CASES> CASE: an injective morphism MATH of diagrams of sets over MATH gives rise to an injective map MATH of sets, CASE: in general the same is not the case for diagrams of abelian groups and their colimits. </CASES>  
LEMMA	  Let MATH be an index category, i.e., a category. Assume <CASES> CASE: for every pair of morphisms MATH and MATH in MATH there exist an object MATH and morphisms MATH and MATH such that MATH, and CASE: for every pair of morphisms MATH there exists a morphism MATH such that MATH. </CASES> Then MATH is a (possibly empty) union of disjoint filtered index categories MATH.  
LEMMA	  Let MATH be an index category satisfying the hypotheses of Lemma REF above. Then colimits over MATH commute with fibre products and equalizers in sets (and more generally with finite connected limits).  
DEFNN	  We say that a diagram MATH is codirected or cofiltered if the following conditions hold: <CASES> CASE: the category MATH has at least one object, CASE: for every pair of objects MATH of MATH there exist an object MATH and morphisms MATH, MATH, and CASE: for every pair of objects MATH of MATH and every pair of morphisms MATH of MATH there exists a morphism MATH of MATH such that MATH as morphisms in MATH. </CASES> We say that an index category MATH is codirected, or cofiltered if MATH is cofiltered (in other words you erase the MATH in part (3) above).  
DEFNN	  Let MATH be a set and let MATH be a binary relation on MATH. <CASES> CASE: We say MATH is a preorder if it is transitive (if MATH and MATH then MATH) and reflexive (MATH for all MATH). CASE: A preordered set is a set endowed with a preorder. CASE: A directed set is a preordered set MATH such that MATH is not empty and such that MATH, there exists MATH with MATH. CASE: We say MATH is a partial order if it is a preorder which is antisymmetric (if MATH and MATH, then MATH). CASE: A partially ordered set is a set endowed with a partial order. CASE: A directed partially ordered set is a directed set whose ordering is a partial order. </CASES>  
DEFNN	  Let MATH be a preordered set. Let MATH be a category. <CASES> CASE: A system over MATH in MATH, sometimes called a inductive system over MATH in MATH is given by objects MATH of MATH and for every MATH a morphism MATH such that MATH and such that MATH whenever MATH. CASE: An inverse system over MATH in MATH, sometimes called a projective system over MATH in MATH is given by objects MATH of MATH and for every MATH a morphism MATH such that MATH and such that MATH whenever MATH. (Note reversal of inequalities.) </CASES> We will say MATH is a (inverse) system over MATH to denote this. The maps MATH are sometimes called the transition maps.  
DEFNN	  Let MATH be a preordered set. We say a system (resp.\ inverse system) MATH is a directed system (resp.\ directed inverse system) if MATH is a directed set (Definition REF): MATH is nonempty and for all MATH there exists MATH such that MATH and MATH.  
LEMMA	  Let MATH be a filtered index category. There exist a directed set MATH and a system MATH over MATH in MATH with the following properties: <CASES> CASE: For every category MATH and every diagram MATH with values in MATH, denote MATH the corresponding system over MATH. If MATH exists then so does MATH and the transformation MATH of Lemma REF is an isomorphism. CASE: For every category MATH and every diagram MATH in MATH, denote MATH the corresponding inverse system over MATH. If MATH exists then so does MATH and the transformation MATH of Lemma REF is an isomorphism. </CASES>  
LEMMA	  If MATH is a cofiltered diagram of sets and all the MATH are finite nonempty, then MATH is nonempty. In other words, the limit of a directed inverse system of finite nonempty sets is nonempty.  
DEFNN	  Let MATH be a diagram in a category MATH. <CASES> CASE: Assume the index category MATH is filtered and let MATH be a cocone for MATH, see Remark REF. We say MATH is essentially constant with value MATH if there exist an MATH and a morphism MATH such that <CASES> CASE: MATH is MATH, and CASE: for all MATH there exist MATH and morphisms MATH and MATH such that the morphism MATH equals the composition MATH. </CASES> CASE: Assume the index category MATH is cofiltered and let MATH be a cone for MATH, see Remark REF. We say MATH is essentially constant with value MATH if there exist an MATH and a morphism MATH such that <CASES> CASE: MATH is MATH, and CASE: for all MATH there exist MATH and morphisms MATH and MATH such that the morphism MATH equals the composition MATH. </CASES> </CASES> Please keep in mind Lemma REF when using this definition.  
DEFNN	  Let MATH be a category. A directed system MATH is an essentially constant system if MATH viewed as a functor MATH defines an essentially constant diagram. A directed inverse system MATH is an essentially constant inverse system if MATH viewed as a functor MATH defines an essentially constant inverse diagram.  
LEMMA	  Let MATH be a diagram. If MATH is filtered and MATH is essentially constant as an ind-object, then MATH exists and MATH is essentially constant with value MATH. If MATH is cofiltered and MATH is essentially constant as a pro-object, then MATH exists and MATH is essentially constant with value MATH.  
LEMMA	  Let MATH be a category. Let MATH be a diagram with filtered (resp.\ cofiltered) index category MATH. Let MATH be a functor. If MATH is essentially constant as an ind-object (resp.\ pro-object), then so is MATH.  
LEMMA	  Let MATH be a category. Let MATH be a diagram with filtered index category MATH. The following are equivalent <CASES> CASE: MATH is an essentially constant ind-object, CASE: there exists a cocone MATH such that for any MATH in MATH the map MATH is bijective, CASE: MATH exists and for any MATH in MATH the map MATH is bijective, and CASE: there exists an MATH in MATH and a morphism MATH such that for any MATH in MATH the map MATH is bijective. </CASES> In cases (2), (3), and (4) the value of the essentially constant system is MATH.  
LEMMA	  Let MATH be a category. Let MATH be a diagram with cofiltered index category MATH. The following are equivalent <CASES> CASE: MATH is an essentially constant pro-object, CASE: there exists a cone MATH such that for any MATH in MATH the map MATH is bijective, CASE: MATH exists and for any MATH in MATH the map MATH is bijective, and CASE: there exists an MATH in MATH and a morphism MATH such that for any MATH in MATH the map MATH is bijective. </CASES> In cases (2), (3), and (4) the value of the essentially constant system is MATH.  
LEMMA	  Let MATH be a category. Let MATH be a functor of filtered index categories. If MATH is cofinal, then any diagram MATH is essentially constant if and only if MATH is essentially constant.  
LEMMA	  Let MATH and MATH be filtered categories and denote MATH the projection. Then MATH is filtered and a diagram MATH is essentially constant if and only if MATH is essentially constant.  
LEMMA	  Let MATH be a category. Let MATH be a functor of cofiltered index categories. If MATH is initial, then any diagram MATH is essentially constant if and only if MATH is essentially constant.  
DEFNN	  Let MATH be a functor. <CASES> CASE: Suppose all finite limits exist in MATH. We say MATH is left exact if it commutes with all finite limits. CASE: Suppose all finite colimits exist in MATH. We say MATH is right exact if it commutes with all finite colimits. CASE: We say MATH is exact if it is both left and right exact. </CASES>  
LEMMA	  Let MATH be a functor. Suppose all finite limits exist in MATH, see Lemma REF. The following are equivalent: <CASES> CASE: MATH is left exact, CASE: MATH commutes with finite products and equalizers, and CASE: MATH transforms a final object of MATH into a final object of MATH, and commutes with fibre products. </CASES>  
LEMMA	  Let MATH be a functor. Suppose all finite colimits exist in MATH, see Lemma REF. The following are equivalent: <CASES> CASE: MATH is right exact, CASE: MATH commutes with finite coproducts and coequalizers, and CASE: MATH transforms an initial object of MATH into an initial object of MATH, and commutes with pushouts. </CASES>  
DEFNN	  Let MATH, MATH be categories. Let MATH and MATH be functors. We say that MATH is a left adjoint of MATH, or that MATH is a right adjoint to MATH if there are bijections MATH functorial in MATH, and MATH.  
LEMMA	  Let MATH be a functor between categories. If for each MATH the functor MATH is representable, then MATH has a right adjoint.  
LEMMA	  REF Let MATH be a left adjoint to MATH as in Definition REF. <CASES> CASE: If MATH is fully faithful, then MATH is fully faithful. CASE: If MATH is fully faithful, then MATH is fully faithful. </CASES>  
LEMMA	  Let MATH be a left adjoint to MATH as in Definition REF. Then <CASES> CASE: MATH is fully faithful MATH MATH MATH MATH is an isomorphism, CASE: MATH is fully faithful MATH MATH MATH MATH is an isomorphism. </CASES>  
LEMMA	  Let MATH be a left adjoint to MATH as in Definition REF. <CASES> CASE: Suppose that MATH is a diagram, and suppose that MATH exists in MATH. Then MATH. In other words, MATH commutes with (representable) colimits. CASE: Suppose that MATH is a diagram, and suppose that MATH exists in MATH. Then MATH. In other words MATH commutes with representable limits. </CASES>  
LEMMA	  Let MATH be a left adjoint of MATH as in Definition REF. <CASES> CASE: If MATH has finite colimits, then MATH is right exact. CASE: If MATH has finite limits, then MATH is left exact. </CASES>  
LEMMA	  Let MATH be a left adjoint to the functor MATH. Let MATH be the unit and MATH be the counit. Then MATH are the identity morphisms.  
LEMMA	  Let MATH be functors with right adjoints MATH. Let MATH be a transformation of functors. Let MATH be the corresponding transformation of adjoint functors. Then MATH is commutative where the unlabeled arrows are the counit transformations.  
LEMMA	  Let MATH, MATH, and MATH be categories. Let MATH and MATH be functors with left adjoints MATH and MATH respectively. Then <CASES> CASE: The functor MATH has a left adjoint equal to MATH. CASE: Given MATH in MATH we have MATH Where MATH is the counit of the adjunctions. </CASES>  
LEMMA	  Let MATH be a big category which has limits. Let MATH be a functor. Assume that <CASES> CASE: MATH commutes with limits, CASE: there exist a family MATH of objects of MATH and for each MATH an element MATH such that for MATH and MATH there exist an MATH and a morphism MATH with MATH. </CASES> Then MATH is representable, i.e., there exists an object MATH of MATH such that MATH functorially in MATH.  
THEOM	[Adjoint functor theorem]  Let MATH be a functor of big categories. Assume MATH has limits, MATH commutes with them, and for every object MATH of MATH there exists a set of pairs MATH with MATH, MATH such that for any pair MATH with MATH, MATH there are an MATH and a morphism MATH such that MATH. Then MATH has a left adjoint MATH.  
DEFNN	  Let MATH be a big category. An object MATH of MATH is called a categorically compact if we have MATH for every filtered diagram MATH such that MATH exists.  
LEMMA	  Let MATH and MATH be big categories having filtered colimits. Let MATH be a small full subcategory consisting of categorically compact objects of MATH such that every object of MATH is a filtered colimit of objects of MATH. Then every functor MATH has a unique extension MATH commuting with filtered colimits.  
DEFNN	  Let MATH be a category. A set of arrows MATH of MATH is called a left multiplicative system if it has the following properties: <CASES> CASE: The identity of every object of MATH is in MATH and the composition of two composable elements of MATH is in MATH. CASE: Every solid diagram MATH with MATH can be completed to a commutative dotted square with MATH. CASE: For every pair of morphisms MATH and MATH with target MATH such that MATH there exists an MATH with source MATH such that MATH. </CASES> A set of arrows MATH of MATH is called a right multiplicative system if it has the following properties: <CASES> CASE: The identity of every object of MATH is in MATH and the composition of two composable elements of MATH is in MATH. CASE: Every solid diagram MATH with MATH can be completed to a commutative dotted square with MATH. CASE: For every pair of morphisms MATH and MATH with source MATH such that MATH there exists a MATH with target MATH such that MATH. </CASES> A set of arrows MATH of MATH is called a multiplicative system if it is both a left multiplicative system and a right multiplicative system. In other words, this means that MS1, MS2, MS3 hold, where MS1 MATH LMS1 MATH RMS1, MS2 MATH LMS2 MATH RMS2, and MS3 MATH LMS3 MATH RMS3. (That said, of course LMS1 MATH RMS1 MATH MS1.)  
LEMMA	  Let MATH be a category and let MATH be a left multiplicative system. <CASES> CASE: The relation on pairs defined above is an equivalence relation. CASE: The composition rule given above is well defined on equivalence classes. CASE: Composition is associative (and the identity morphisms satisfy the identity axioms), and hence MATH is a category. </CASES>  
DEFNN	  Let MATH be a category and let MATH be a left multiplicative system of morphisms of MATH. Given any morphism MATH in MATH and any morphism MATH in MATH, we denote by MATH the equivalence class of the pair MATH. This is a morphism from MATH to MATH in MATH.  
LEMMA	  Let MATH be a category and let MATH be a left multiplicative system of morphisms of MATH. Given any finite collection MATH of morphisms of MATH (indexed by MATH), we can find an element MATH of MATH and a family of morphisms MATH of MATH such that each MATH is the equivalence class of the pair MATH.  
LEMMA	  Let MATH be a category and let MATH be a left multiplicative system of morphisms of MATH. Let MATH be morphisms of MATH which are the equivalence classes of MATH and MATH. The following are equivalent <CASES> CASE: MATH CASE: there exists a morphism MATH in MATH with MATH, and CASE: there exists a morphism MATH such that MATH and MATH. </CASES>  
LEMMA	  Let MATH be a category and let MATH be a left multiplicative system of morphisms of MATH. <CASES> CASE: The rules MATH and MATH define a functor MATH. CASE: For any MATH the morphism MATH is an isomorphism in MATH. CASE: If MATH is any functor such that MATH is invertible for every MATH, then there exists a unique functor MATH such that MATH. </CASES>  
LEMMA	  Let MATH be a category and let MATH be a left multiplicative system of morphisms of MATH. The localization functor MATH commutes with finite colimits.  
LEMMA	  Let MATH be a category. Let MATH be a left multiplicative system. If MATH, MATH are two morphisms of MATH and if MATH is a commutative diagram in MATH, then there exist a morphism MATH in MATH and a commutative diagram MATH in MATH with MATH and MATH, MATH.  
LEMMA	  Let MATH be a category and let MATH be a right multiplicative system. <CASES> CASE: The relation on pairs defined above is an equivalence relation. CASE: The composition rule given above is well defined on equivalence classes. CASE: Composition is associative (and the identity morphisms satisfy the identity axioms), and hence MATH is a category. </CASES>  
DEFNN	  Let MATH be a category and let MATH be a right multiplicative system of morphisms of MATH. Given any morphism MATH in MATH and any morphism MATH in MATH, we denote by MATH the equivalence class of the pair MATH. This is a morphism from MATH to MATH in MATH.  
LEMMA	  Let MATH be a category and let MATH be a right multiplicative system of morphisms of MATH. Given any finite collection MATH of morphisms of MATH (indexed by MATH), we can find an element MATH of MATH and a family of morphisms MATH of MATH such that MATH is the equivalence class of the pair MATH.  
LEMMA	  Let MATH be a category and let MATH be a right multiplicative system of morphisms of MATH. Let MATH be morphisms of MATH which are the equivalence classes of MATH and MATH. The following are equivalent <CASES> CASE: MATH, CASE: there exists a morphism MATH in MATH with MATH, and CASE: there exists a morphism MATH with MATH and MATH. </CASES>  
LEMMA	  Let MATH be a category and let MATH be a right multiplicative system of morphisms of MATH. <CASES> CASE: The rules MATH and MATH define a functor MATH. CASE: For any MATH the morphism MATH is an isomorphism in MATH. CASE: If MATH is any functor such that MATH is invertible for every MATH, then there exists a unique functor MATH such that MATH. </CASES>  
LEMMA	  Let MATH be a category and let MATH be a right multiplicative system of morphisms of MATH. The localization functor MATH commutes with finite limits.  
LEMMA	  Let MATH be a category. Let MATH be a right multiplicative system. If MATH, MATH are two morphisms of MATH and if MATH is a commutative diagram in MATH, then there exist a morphism MATH in MATH and a commutative diagram MATH in MATH with MATH and MATH, MATH.  
LEMMA	  Let MATH be a category and let MATH be a multiplicative system. The category of left fractions and the category of right fractions MATH are canonically isomorphic.  
DEFNN	  Let MATH be a category and let MATH be a multiplicative system. We say MATH is saturated if, in addition to MS1, MS2, MS3, we also have <CASES> CASE: Given three composable morphisms MATH, if MATH, then MATH. </CASES>  
LEMMA	  Let MATH be a category and let MATH be a multiplicative system. Denote MATH the localization functor. The set MATH is equal to MATH and is the smallest saturated multiplicative system containing MATH. In particular, if MATH is saturated, then MATH.  
DEFNN	  Given a diagram as in the left hand side of: MATH we define the horizontal composition MATH to be the transformation of functors MATH.  
LEMMA	  The horizontal and vertical compositions have the following properties <CASES> CASE: MATH and MATH are associative, CASE: the identity transformations MATH are units for MATH, CASE: the identity transformations of the identity functors MATH are units for MATH and MATH, and CASE: given a diagram MATH we have MATH. </CASES>  
DEFNN	  A (strict) MATH-category MATH consists of the following data <CASES> CASE: A set of objects MATH. CASE: For each pair MATH a category MATH. The objects of MATH will be called MATH-morphisms and denoted MATH. The morphisms between these MATH-morphisms will be called MATH-morphisms and denoted MATH. The composition of MATH-morphisms in MATH will be called vertical composition and will be denoted MATH for MATH and MATH. CASE: For each triple MATH a functor MATH The image of the pair of MATH-morphisms MATH on the left hand side will be called the composition of MATH and MATH, and denoted MATH. The image of the pair of MATH-morphisms MATH will be called the horizontal composition and denoted MATH. </CASES> These data are to satisfy the following rules: <CASES> CASE: The set of objects together with the set of MATH-morphisms endowed with composition of MATH-morphisms forms a category. CASE: Horizontal composition of MATH-morphisms is associative. CASE: The identity MATH-morphism MATH of the identity MATH-morphism MATH is a unit for horizontal composition. </CASES>  
DEFNN	  Let MATH be a MATH-category. A sub MATH-category MATH of MATH, is given by a subset MATH of MATH and sub categories MATH of the categories MATH for all MATH such that these, together with the operations MATH (composition MATH-morphisms), MATH (vertical composition MATH-morphisms), and MATH (horizontal composition) form a MATH-category.  
DEFNN	  Two objects MATH of a MATH-category are equivalent if there exist MATH-morphisms MATH and MATH such that MATH is MATH-isomorphic to MATH and MATH is MATH-isomorphic to MATH.  
DEFNN	  Let MATH be a category and let MATH be a MATH-category. <CASES> CASE: A functor from an ordinary category into a MATH-category will ignore the MATH-morphisms unless mentioned otherwise. In other words, it will be a ``usual'' functor into the category formed out of 2-category by forgetting all the 2-morphisms. CASE: A weak functor, or a pseudo functor MATH from MATH into the 2-category MATH is given by the following data <CASES> CASE: a map MATH, CASE: for every pair MATH, and every morphism MATH a MATH-morphism MATH, CASE: for every MATH a MATH-morphism MATH, and CASE: for every pair of composable morphisms MATH, MATH of MATH a MATH-morphism MATH. </CASES> These data are subject to the following conditions: <CASES> CASE: the MATH-morphisms MATH and MATH are all isomorphisms, CASE: for any morphism MATH in MATH we have MATH: MATH CASE: for any morphism MATH in MATH we have MATH, CASE: for any triple of composable morphisms MATH, MATH, and MATH of MATH we have MATH in other words the following diagram with objects MATH-morphisms and arrows MATH-morphisms commutes MATH </CASES> </CASES>  
DEFNN	  A (strict) MATH-category is a MATH-category in which all MATH-morphisms are isomorphisms.  
DEFNN	  A final object of a MATH-category MATH is an object MATH such that <CASES> CASE: for every MATH there is a morphism MATH, and CASE: every two morphisms MATH are isomorphic by a unique 2-morphism. </CASES>  
DEFNN	  Let MATH be a MATH-category. Let MATH and MATH and MATH. A 2-fibre product of MATH and MATH is a final object in the category of 2-commutative diagrams described above. If a 2-fibre product exists we will denote it MATH, and denote the required morphisms MATH and MATH making the diagram MATH 2-commute and we will denote the given invertible 2-morphism exhibiting this by MATH.  
LEMMA	  In the MATH-category of categories MATH-fibre products exist and are given by the construction of Example REF.  
LEMMA	  Let MATH be a MATH-commutative diagram of categories. A choice of isomorphisms MATH and MATH determines a morphism MATH of MATH-fibre products associated to this situation.  
LEMMA	  Assumptions as in Lemma REF. <CASES> CASE: If MATH and MATH are faithful then the morphism MATH is faithful. CASE: If MATH and MATH are fully faithful and MATH is faithful then the morphism MATH is fully faithful. CASE: If MATH and MATH are equivalences and MATH is fully faithful then the morphism MATH is an equivalence. </CASES>  
LEMMA	  Let MATH be a diagram of categories and functors. Then there is a canonical isomorphism MATH of categories.  
LEMMA	  Let MATH be a commutative diagram of categories and functors. Then there is a canonical functor MATH of categories.  
LEMMA	  Let MATH be a diagram of categories and functors. Then there is a canonical isomorphism MATH of categories.  
LEMMA	  Let MATH be a MATH-fibre product of categories. Then there is a canonical isomorphism MATH.  
LEMMA	  Let MATH be a MATH-fibre product of categories. Then there is a canonical isomorphism MATH  
LEMMA	  Let MATH, MATH and MATH be functors between categories. Then the diagram MATH is a MATH-fibre product diagram.  
LEMMA	  Let MATH be a MATH-fibre product of categories. Then the diagram MATH is MATH-cartesian.  
DEFNN	  Let MATH be a category. The MATH-category of categories over MATH is the MATH-category defined as follows: <CASES> CASE: Its objects will be functors MATH. CASE: Its MATH-morphisms MATH will be functors MATH such that MATH. CASE: Its MATH-morphisms MATH for MATH will be morphisms of functors such that MATH for all MATH. </CASES> In this situation we will denote MATH the category of MATH-morphisms between MATH and MATH  
DEFNN	  Let MATH be a category. Let MATH be a category over MATH. <CASES> CASE: The fibre category over an object MATH is the category MATH with objects MATH and morphisms MATH CASE: A lift of an object MATH is an object MATH such that MATH, i.e., MATH. We will also sometime say that MATH lies over MATH. CASE: Similarly, a lift of a morphism MATH in MATH is a morphism MATH in MATH such that MATH. We sometimes say that MATH lies over MATH. </CASES>  
LEMMA	  Let MATH be a category. The MATH-category of categories over MATH has 2-fibre products. Suppose that MATH and MATH are morphisms of categories over MATH. An explicit 2-fibre product MATH is given by the following description <CASES> CASE: an object of MATH is a quadruple MATH, where MATH, MATH, MATH, and MATH is an isomorphism in MATH, CASE: a morphism MATH is given by a pair MATH, where MATH is a morphism in MATH, and MATH is a morphism in MATH such that <CASES> CASE: MATH and MATH induce the same morphism MATH, and CASE: the diagram MATH is commutative. </CASES> </CASES> The functors MATH and MATH are the forgetful functors in this case. The transformation MATH is given on the object MATH by MATH.  
LEMMA	  Let MATH be a category. Let MATH and MATH be morphisms of categories over MATH. For any object MATH of MATH we have the following identity of fibre categories MATH  
DEFNN	  Let MATH be a category. Let MATH be a category over MATH. A strongly cartesian morphism, or more precisely a strongly MATH-cartesian morphism is a morphism MATH of MATH such that for every MATH the map MATH given by MATH is bijective.  
LEMMA	  Let MATH be a category. Let MATH be a category over MATH. <CASES> CASE: The composition of two strongly cartesian morphisms is strongly cartesian. CASE: Any isomorphism of MATH is strongly cartesian. CASE: Any strongly cartesian morphism MATH such that MATH is an isomorphism, is an isomorphism. </CASES>  
LEMMA	  Let MATH and MATH be composable functors between categories. Let MATH be a morphism of MATH. If MATH is strongly MATH-cartesian and MATH is strongly MATH-cartesian, then MATH is strongly MATH-cartesian.  
LEMMA	  Let MATH be a category. Let MATH be a category over MATH. Let MATH and MATH be morphisms of MATH. Assume <CASES> CASE: MATH is strongly cartesian, CASE: MATH exists, and CASE: there exists a strongly cartesian morphism MATH in MATH with MATH and MATH. </CASES> Then the fibre product MATH exists and is isomorphic to MATH.  
DEFNN	  Let MATH be a category. Let MATH be a category over MATH. We say MATH is a fibred category over MATH if given any MATH lying over MATH and any morphism MATH of MATH, there exists a strongly cartesian morphism MATH lying over MATH.  
DEFNN	  Assume MATH is a fibred category. <CASES> CASE: A choice of pullbacks for MATH is given by a choice of a strongly cartesian morphism MATH lying over MATH for any morphism MATH of MATH and any MATH. CASE: Given a choice of pullbacks, for any morphism MATH of MATH the functor MATH described above is called a pullback functor (associated to the choices MATH made above). </CASES>  
LEMMA	  Assume MATH is a fibred category. Assume given a choice of pullbacks for MATH. <CASES> CASE: For any pair of composable morphisms MATH, MATH there is a unique isomorphism MATH as functors MATH such that for every MATH the following diagram commutes MATH CASE: If MATH, then there is a canonical isomorphism MATH as functors MATH. CASE: The quadruple MATH defines a pseudo functor from MATH to the MATH-category of categories, see Definition REF. </CASES>  
LEMMA	  Let MATH be a category. Let MATH, MATH be categories over MATH. Suppose that MATH and MATH are equivalent as categories over MATH. Then MATH is fibred over MATH if and only if MATH is fibred over MATH.  
DEFNN	  Let MATH be a category. The MATH-category of fibred categories over MATH is the sub MATH-category of the MATH-category of categories over MATH (see Definition REF) defined as follows: <CASES> CASE: Its objects will be fibred categories MATH. CASE: Its MATH-morphisms MATH will be functors MATH such that MATH and such that MATH maps strongly cartesian morphisms to strongly cartesian morphisms. CASE: Its MATH-morphisms MATH for MATH will be morphisms of functors such that MATH for all MATH. </CASES> In this situation we will denote MATH the category of MATH-morphisms between MATH and MATH  
LEMMA	  Let MATH be a category. The MATH-category of fibred categories over MATH has 2-fibre products, and they are described as in Lemma REF.  
LEMMA	  Let MATH be a category. Let MATH. If MATH is a fibred category and MATH factors through MATH then MATH is a fibred category.  
LEMMA	  Let MATH be functors between categories. If MATH is fibred over MATH and MATH is fibred over MATH, then MATH is fibred over MATH.  
LEMMA	  Let MATH be a fibred category. Let MATH and MATH be morphisms of MATH with MATH strongly cartesian. If MATH exists, then MATH exists, MATH, and MATH is strongly cartesian.  
LEMMA	  Let MATH be a category. Let MATH be a MATH-morphism of fibred categories over MATH. There exist MATH-morphisms of fibred categories over MATH MATH such that MATH and such that <CASES> CASE: MATH is fully faithful, CASE: MATH is left adjoint to MATH, and CASE: MATH is a fibred category. </CASES>  
LEMMA	  Let MATH be a category. Let MATH and MATH be fibred categories. Let MATH be a MATH-morphism of fibred categories over MATH. Consider the category MATH over MATH whose <CASES> CASE: objects are pairs MATH where MATH and MATH is an automorphism with MATH, CASE: morphisms MATH are given by morphisms MATH such that MATH commutes, and CASE: the functor MATH is given by MATH. </CASES> Then <CASES> CASE: there is an equivalence MATH in the MATH-category of categories over MATH, and CASE: MATH is a fibred category over MATH. </CASES>  
DEFNN	  Let MATH be a category. <CASES> CASE: Let MATH be a MATH-morphism of fibred categories over MATH. The relative inertia of MATH over MATH is the fibred category MATH of Lemma REF. CASE: By the inertia fibred category MATH of MATH we mean MATH. </CASES>  
LEMMA	  Let MATH be a MATH-morphism of categories fibred over a category MATH. Then the diagram MATH is a MATH-fibre product.  
DEFNN	  Let MATH be a functor. We say that MATH is fibred in groupoids over MATH if the following two conditions hold: <CASES> CASE: For every morphism MATH in MATH and every lift MATH of MATH there is a lift MATH of MATH with target MATH. CASE: For every pair of morphisms MATH and MATH and any morphism MATH such that MATH there exists a unique lift MATH of MATH such that MATH. </CASES>  
LEMMA	  Let MATH be a functor. The following are equivalent <CASES> CASE: MATH is a category fibred in groupoids, and CASE: all fibre categories are groupoids and MATH is a fibred category over MATH. </CASES> Moreover, in this case every morphism of MATH is strongly cartesian. In addition, given MATH lying over MATH for all MATH the data MATH constructed in Lemma REF defines a pseudo functor from MATH in to the MATH-category of groupoids.  
LEMMA	  Let MATH be a category. Let MATH be a fibred category. Let MATH be the subcategory of MATH defined as follows <CASES> CASE: MATH, and CASE: for MATH the set of morphisms between MATH and MATH in MATH is the set of strongly cartesian morphisms between MATH and MATH in MATH. </CASES> Let MATH be the restriction of MATH to MATH. Then MATH is fibred in groupoids.  
DEFNN	  Let MATH be a category. The MATH-category of categories fibred in groupoids over MATH is the sub MATH-category of the MATH-category of fibred categories over MATH (see Definition REF) defined as follows: <CASES> CASE: Its objects will be categories MATH fibred in groupoids. CASE: Its MATH-morphisms MATH will be functors MATH such that MATH (since every morphism is strongly cartesian MATH automatically preserves them). CASE: Its MATH-morphisms MATH for MATH will be morphisms of functors such that MATH for all MATH. </CASES>  
LEMMA	  Let MATH be a category. The MATH-category of categories fibred in groupoids over MATH has 2-fibre products, and they are described as in Lemma REF.  
LEMMA	  Let MATH and MATH be categories fibred in groupoids, and suppose that MATH is a functor over MATH. <CASES> CASE: Then MATH is faithful (resp.\ fully faithful, resp.\ an equivalence) if and only if for each MATH the induced functor MATH is faithful (resp.\ fully faithful, resp.\ an equivalence). CASE: If MATH is an equivalence, then MATH is an equivalence in the MATH-category of categories fibred in groupoids over MATH. </CASES>  
LEMMA	  Let MATH be a category. Let MATH and MATH be categories fibred in groupoids. Let MATH be a functor over MATH. Then MATH is fully faithful if and only if the diagonal MATH is an equivalence.  
LEMMA	  Let MATH be a category. Let MATH, MATH be categories fibred in groupoids over MATH. Suppose that MATH and MATH are equivalences over MATH. Then MATH is an equivalence of categories.  
LEMMA	  Let MATH be a category. If MATH is fibred in groupoids, then so is the inertia fibred category MATH.  
LEMMA	  Let MATH be a category. Let MATH. If MATH is a category fibred in groupoids and MATH factors through MATH then MATH is fibred in groupoids.  
LEMMA	  Let MATH be functors between categories. If MATH is fibred in groupoids over MATH and MATH is fibred in groupoids over MATH, then MATH is fibred in groupoids over MATH.  
LEMMA	  Let MATH be a category fibred in groupoids. Let MATH and MATH be morphisms of MATH. If MATH exists, then MATH exists and MATH.  
LEMMA	  Let MATH be a category. Let MATH be a MATH-morphism of categories fibred in groupoids over MATH. There exists a factorization MATH by MATH-morphisms of categories fibred in groupoids over MATH such that MATH is an equivalence over MATH and such that MATH is a category fibred in groupoids over MATH.  
LEMMA	  Let MATH be a category. Let MATH be a MATH-morphism of categories fibred in groupoids over MATH. Assume we have a MATH-commutative diagram MATH where MATH and MATH are equivalences of categories over MATH and MATH and MATH are categories fibred in groupoids. Then there exists an equivalence MATH of categories over MATH such that MATH is MATH-isomorphic to MATH as MATH-morphisms of categories over MATH. If the diagram above actually commutes, then we can arrange it so that MATH is MATH-isomorphic to MATH as MATH-morphisms of categories over MATH.  
DEFNN	  Let MATH be a category. Suppose that MATH is a functor to the MATH-category of categories. We will write MATH for the fibred category constructed in Example REF. A split fibred category is a fibred category isomorphic (!) over MATH to one of these categories MATH.  
LEMMA	  Let MATH be a category. Let MATH be a fibred category over MATH. Then MATH is split if and only if for some choice of pullbacks (see Definition REF) the pullback functors MATH and MATH are equal.  
LEMMA	  Let MATH be a fibred category. There exists a contravariant functor MATH such that MATH is equivalent to MATH in the MATH-category of fibred categories over MATH. In other words, every fibred category is equivalent to a split one.  
DEFNN	  Let MATH be a category. Suppose that MATH is a functor to the MATH-category of groupoids. We will write MATH for the category fibred in groupoids constructed in Example REF. A split category fibred in groupoids is a category fibred in groupoids isomorphic (!) over MATH to one of these categories MATH.  
LEMMA	  Let MATH be a category fibred in groupoids. There exists a contravariant functor MATH such that MATH is equivalent to MATH over MATH. In other words, every category fibred in groupoids is equivalent to a split one.  
DEFNN	  A category is called discrete if the only morphisms are the identity morphisms.  
DEFNN	  Let MATH be a category. A category fibred in sets, or a category fibred in discrete categories is a category fibred in groupoids all of whose fibre categories are discrete.  
DEFNN	  Let MATH be a category. The MATH-category of categories fibred in sets over MATH is the sub MATH-category of the category of categories fibred in groupoids over MATH (see Definition REF) defined as follows: <CASES> CASE: Its objects will be categories MATH fibred in sets. CASE: Its MATH-morphisms MATH will be functors MATH such that MATH (since every morphism is strongly cartesian MATH automatically preserves them). CASE: Its MATH-morphisms MATH for MATH will be morphisms of functors such that MATH for all MATH. </CASES>  
LEMMA	  Let MATH be a category. The 2-category of categories fibred in sets over MATH has 2-fibre products. More precisely, the 2-fibre product described in Lemma REF returns a category fibred in sets if one starts out with such.  
LEMMA	  [ Categories fibred in sets are precisely presheaves. ] Let MATH be a category. The only MATH-morphisms between categories fibred in sets are identities. In other words, the MATH-category of categories fibred in sets is a category. Moreover, there is an equivalence of categories MATH The functor from left to right is the construction MATH discussed in Example REF. The functor from right to left assigns to MATH the presheaf of objects MATH.  
DEFNN	  Let us call a category a setoid if it is a groupoid where every object has exactly one automorphism: the identity.  
DEFNN	  Let MATH be a category. A category fibred in setoids is a category fibred in groupoids all of whose fibre categories are setoids.  
DEFNN	  Let MATH be a category. The MATH-category of categories fibred in setoids over MATH is the sub MATH-category of the category of categories fibred in groupoids over MATH (see Definition REF) defined as follows: <CASES> CASE: Its objects will be categories MATH fibred in setoids. CASE: Its MATH-morphisms MATH will be functors MATH such that MATH (since every morphism is strongly cartesian MATH automatically preserves them). CASE: Its MATH-morphisms MATH for MATH will be morphisms of functors such that MATH for all MATH. </CASES>  
LEMMA	  Let MATH be a category. The 2-category of categories fibred in setoids over MATH has 2-fibre products. More precisely, the 2-fibre product described in Lemma REF returns a category fibred in setoids if one starts out with such.  
LEMMA	  Let MATH be a category. Let MATH be a category over MATH. <CASES> CASE: If MATH is an equivalence over MATH with MATH fibred in sets over MATH, then <CASES> CASE: MATH is fibred in setoids over MATH, and CASE: for each MATH the map MATH identifies the target as the set of isomorphism classes of the source. </CASES> CASE: If MATH is a category fibred in setoids, then there exists a category fibred in sets MATH and an equivalence MATH over MATH. </CASES>  
LEMMA	  Let MATH be a category. The construction of Lemma REF part (2) gives a functor MATH (see Definition REF). This functor is an equivalence in the following sense: <CASES> CASE: for any two 1-morphisms MATH with MATH there exists a unique 2-isomorphism MATH, CASE: for any morphism MATH there exists a 1-morphism MATH with MATH, and CASE: any category fibred in sets MATH is equal to MATH. </CASES> In particular, defining MATH by the rule MATH, we have MATH More precisely, given any map MATH there exists a MATH-morphism MATH which induces MATH on isomorphism classes of objects and which is unique up to unique MATH-isomorphism.  
LEMMA	  Let MATH be a category. Let MATH be a category fibred in groupoids. The following are equivalent: <CASES> CASE: MATH is a category fibred in setoids, and CASE: the canonical MATH-morphism MATH, see (REF), is an equivalence (of categories over MATH). </CASES>  
LEMMA	  Let MATH be a category. The construction of Lemma REF which associates to a category fibred in setoids a presheaf is compatible with products, in the sense that the presheaf associated to a MATH-fibre product MATH is the fibre product of the presheaves associated to MATH.  
DEFNN	  Let MATH be a category. A category fibred in groupoids MATH is called representable if there exist an object MATH of MATH and an equivalence MATH (in the MATH-category of groupoids over MATH).  
LEMMA	  Let MATH be a category. Let MATH be a category fibred in groupoids. <CASES> CASE: MATH is representable if and only if the following conditions are satisfied: <CASES> CASE: MATH is fibred in setoids, and CASE: the presheaf MATH is representable. </CASES> CASE: If MATH is representable the pair MATH, where MATH is the equivalence MATH, is uniquely determined up to isomorphism. </CASES>  
LEMMA	  Let MATH be a category. Let MATH, MATH be categories fibred in groupoids over MATH. Assume that MATH, MATH are representable by objects MATH, MATH of MATH. Then MATH More precisely, given MATH there exists a MATH-morphism MATH which induces MATH on isomorphism classes of objects and which is unique up to unique MATH-isomorphism.  
LEMMA	[2-Yoneda lemma for fibred categories]  Let MATH be a category. Let MATH be a fibred category over MATH. Let MATH. The functor MATH given by MATH is an equivalence.  
LEMMA	[2-Yoneda lemma]  Let MATH be fibred in groupoids. Let MATH. The functor MATH given by MATH is an equivalence.  
LEMMA	  In the situation above the fibre category of MATH over an object MATH of MATH is the category described as follows: <CASES> CASE: objects are pairs MATH, where MATH, and MATH is a morphism in MATH, CASE: the set of morphisms between MATH and MATH is the set of morphisms MATH in MATH such that MATH. </CASES>  
LEMMA	  Let MATH be a category. Let MATH, MATH be categories fibred in groupoids over MATH. Let MATH be a MATH-morphism. Let MATH be a MATH-morphism. Then MATH is a category fibred in groupoids.  
DEFNN	  Let MATH be a category. Let MATH, MATH be categories fibred in groupoids over MATH. Let MATH be a MATH-morphism. We say MATH is representable, or that MATH is relatively representable over MATH, if for every MATH and any MATH the category fibred in groupoids MATH is representable.  
LEMMA	  Let MATH be a category. Let MATH, MATH be categories fibred in groupoids over MATH. Let MATH be a MATH-morphism. If MATH is representable then every one of the functors MATH between fibre categories is faithful.  
LEMMA	  Let MATH be a category. Let MATH, MATH be categories fibred in groupoids over MATH. Let MATH be a MATH-morphism. Make a choice of pullbacks for MATH. Assume <CASES> CASE: each functor MATH between fibre categories is faithful, and CASE: for each MATH and each MATH the presheaf MATH is a representable presheaf on MATH. </CASES> Then MATH is representable.  
LEMMA	  Let MATH be a category. Let MATH be a category fibred in groupoids. Assume MATH has products of pairs of objects and fibre products. The following are equivalent: <CASES> CASE: The diagonal MATH is representable. CASE: For every MATH in MATH, any MATH is representable. </CASES>  
DEFNN	  A triple MATH where MATH is a category, MATH is a functor, and MATH is an associativity constraint is called a monoidal category if there exists a unit MATH.  
DEFNN	  Let MATH and MATH be monoidal categories. A functor of monoidal categories MATH is given by a functor MATH as indicated and a isomorphism MATH functorial in MATH and MATH such that for all objects MATH, MATH, and MATH the diagram MATH commutes and such that MATH is a unit in MATH.  
LEMMA	  Let MATH be a monoidal category. Let MATH be an object of MATH. The following are equivalent <CASES> CASE: the functor MATH is an equivalence, CASE: the functor MATH is an equivalence, CASE: there exists an object MATH such that MATH. </CASES>  
DEFNN	  Let MATH be a monoidal category. An object MATH of MATH is called invertible if any (or all) of the equivalent conditions of Lemma REF hold.  
DEFNN	  Given a monoidal category MATH and an object MATH a left dual is an object MATH together with morphisms MATH and MATH such that the diagrams MATH commute. In this situation we say that MATH is a right dual of MATH.  
LEMMA	  Let MATH be a monoidal category. If MATH is a left dual to MATH, then MATH functorially in MATH and MATH.  
LEMMA	  Let MATH be a monoidal category. If MATH, MATH are left duals of MATH, MATH, then MATH is a left dual of MATH.  
DEFNN	  A quadruple MATH where MATH is a category, MATH is a functor, MATH is an associativity constraint, and MATH is a commutativity constraint compatible with MATH is called a symmetric monoidal category if there exists a unit.  
LEMMA	  Let MATH be a symmetric monoidal category. Let MATH be an object of MATH and let MATH, MATH, and MATH be a left dual of MATH as in Definition REF. Then MATH and MATH makes MATH into a left dual of MATH.  
DEFNN	  Let MATH and MATH be symmetric monoidal categories. A functor of symmetric monoidal categories MATH is given by a functor MATH as indicated and an isomorphism MATH functorial in MATH and MATH such that MATH is a functor of monoidal categories and such that for all objects MATH and MATH the diagram MATH commutes.  
DEFNN	  Let MATH be a MATH-category. Consider a MATH-commutative  solid diagram MATH in MATH. Fix a MATH-isomorphism  MATH witnessing the MATH-commutativity of the diagram. Given (REF) and MATH, a dotted arrow is a triple MATH consisting of a morphism  MATH and and MATH-isomorphisms MATH, MATH such that MATH, in other words such that MATH is commutative. A morphism of dotted arrows MATH is a MATH-arrow MATH such that MATH and MATH.  
LEMMA	  Let MATH be a MATH-category. Assume given a MATH-commutative diagram MATH in MATH, where the right square is MATH-cartesian  with respect to a MATH-isomorphism MATH.  Choose a MATH-arrow MATH. Set MATH, MATH and let MATH be the MATH-isomorphism  MATH.  Then the category MATH of dotted arrows for the left square and MATH is equivalent to the category  MATH of dotted arrows for the outer rectangle and MATH.  
LEMMA	  Let MATH be a MATH-category. Assume given a solid MATH-commutative diagram MATH in MATH.  Choose a MATH-isomorphism MATH.  Let MATH be the category of dotted arrows for  the outer rectangle and MATH. Let MATH be  the category of dotted arrows for the solid square MATH and MATH. Then MATH is equivalent to  a category MATH which has the following property:  there is a functor MATH which turns MATH into a category fibred in groupoids over MATH and whose fibre categories are isomorphic to categories of dotted arrows for certain solid squares of the form MATH and some choices of MATH-isomorphism MATH.  
